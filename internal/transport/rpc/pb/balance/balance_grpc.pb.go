// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/balance.proto

package balance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BalanceActionServiceClient is the client API for BalanceActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BalanceActionServiceClient interface {
	Fill(ctx context.Context, in *FillRequest, opts ...grpc.CallOption) (*FillResponse, error)
	Get(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AmountResponse, error)
}

type balanceActionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBalanceActionServiceClient(cc grpc.ClientConnInterface) BalanceActionServiceClient {
	return &balanceActionServiceClient{cc}
}

func (c *balanceActionServiceClient) Fill(ctx context.Context, in *FillRequest, opts ...grpc.CallOption) (*FillResponse, error) {
	out := new(FillResponse)
	err := c.cc.Invoke(ctx, "/balance.BalanceActionService/Fill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceActionServiceClient) Get(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AmountResponse, error) {
	out := new(AmountResponse)
	err := c.cc.Invoke(ctx, "/balance.BalanceActionService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BalanceActionServiceServer is the server API for BalanceActionService service.
// All implementations should embed UnimplementedBalanceActionServiceServer
// for forward compatibility
type BalanceActionServiceServer interface {
	Fill(context.Context, *FillRequest) (*FillResponse, error)
	Get(context.Context, *EmptyRequest) (*AmountResponse, error)
}

// UnimplementedBalanceActionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBalanceActionServiceServer struct {
}

func (UnimplementedBalanceActionServiceServer) Fill(context.Context, *FillRequest) (*FillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fill not implemented")
}
func (UnimplementedBalanceActionServiceServer) Get(context.Context, *EmptyRequest) (*AmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeBalanceActionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BalanceActionServiceServer will
// result in compilation errors.
type UnsafeBalanceActionServiceServer interface {
	mustEmbedUnimplementedBalanceActionServiceServer()
}

func RegisterBalanceActionServiceServer(s grpc.ServiceRegistrar, srv BalanceActionServiceServer) {
	s.RegisterService(&BalanceActionService_ServiceDesc, srv)
}

func _BalanceActionService_Fill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceActionServiceServer).Fill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/balance.BalanceActionService/Fill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceActionServiceServer).Fill(ctx, req.(*FillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceActionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceActionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/balance.BalanceActionService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceActionServiceServer).Get(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BalanceActionService_ServiceDesc is the grpc.ServiceDesc for BalanceActionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BalanceActionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "balance.BalanceActionService",
	HandlerType: (*BalanceActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fill",
			Handler:    _BalanceActionService_Fill_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BalanceActionService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/balance.proto",
}
